name: Release

on:
  push:
    tags:
      - "v*" # Trigger on version tags like v0.1.0, v0.2.0, etc.

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Pre-release checks
  pre-release-checks:
    name: Pre-release Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Check formatting
        run: cargo fmt --all -- --check
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: Run all tests
        run: cargo test --all
      - name: Build all crates
        run: cargo build --all --release
      - name: Check documentation
        run: cargo doc --no-deps --all
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
            echo "Error: Invalid version format. Expected format: vX.Y.Z[-prerelease][+build]"
            exit 1
          fi
          echo "Version $VERSION is valid"
      - name: Check if version exists in Cargo.toml
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | cut -d'"' -f2)
          if [[ "$VERSION" != "v$CARGO_VERSION" ]]; then
            echo "Error: Version mismatch. Tag: $VERSION, Cargo.toml: $CARGO_VERSION"
            exit 1
          fi
          echo "Version $VERSION matches Cargo.toml"
  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [[ -z "$PREVIOUS_TAG" ]]; then
            # First release
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            # Subsequent releases
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
          fi

          # Filter out merge commits and format
          CHANGELOG=$(echo "$CHANGELOG" | grep -v "^Merge" | sed 's/^/- /')

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
  load-crates:
    name: Load Crate Configuration
    uses: ./.github/workflows/shared-crates.yml

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    environment: crates.io
    needs:
      [pre-release-checks, validate-version, generate-changelog, load-crates]
    strategy:
      matrix:
        crate: ${{ fromJSON(needs.load-crates.outputs.publish-crates) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Login to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: login
          args: --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      - name: Publish ${{ matrix.crate }}
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --package ${{ matrix.crate }} --no-verify
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish, generate-changelog]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          release_name: Release ${{ steps.version.outputs.VERSION }}
          body: |
            ## What's Changed

            ${{ needs.generate-changelog.outputs.changelog }}

            ## Installation

            ```bash
            # Install the CLI
            cargo install cacophony

            # Or add to your project
            cargo add ligature-ast ligature-parser ligature-types ligature-eval
            ```

            ## Documentation

            - [Language Reference](https://github.com/ligature-lang/ligature/blob/main/docs/user-guide/language-reference.md)
            - [Getting Started](https://github.com/ligature-lang/ligature/blob/main/docs/user-guide/getting-started.md)
            - [Examples](https://github.com/ligature-lang/ligature/blob/main/docs/user-guide/examples.md)
          draft: false
          prerelease: false
  post-release:
    name: Post-release Tasks
    runs-on: ubuntu-latest
    needs: [create-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      - name: Update version in Cargo.toml for next development cycle
        run: |
          # This would typically bump to the next patch version for development
          # For now, we'll just log that this step would happen
          echo "Would update version in Cargo.toml for next development cycle"
          echo "Current version: ${{ steps.version.outputs.VERSION }}"

      - name: Notify release completion
        run: |
          echo "Release ${{ steps.version.outputs.VERSION }} completed successfully!"
